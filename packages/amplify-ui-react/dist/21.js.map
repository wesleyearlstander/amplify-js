{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"names":["amplifyFormFieldCss","AmplifyFormField","registerInstance","h","htmlFor","fieldId","id","name","description","type","handleInputChange","placeholder","value","inputProps","disabled","amplifyHintCss","AmplifyHint","amplifyInputCss","AmplifyInput","input","_this","targetInput","e","closestElement","onAuthUIStateChange","navigator","container","signIn","username","password","onInput","Object","get","getElement","enumerable","configurable","amplifyLabelCss","AmplifyLabel"],"mappings":"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","file":"21.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\r\nimport '@aws-amplify/core';\r\nimport './auth-types-caf635db.js';\r\nimport '@aws-amplify/auth';\r\nimport './Translations-97eed81d.js';\r\nimport './constants-727dee2c.js';\r\nimport { e as closestElement, o as onAuthUIStateChange } from './helpers-ff1bbc26.js';\r\nvar amplifyFormFieldCss = \"amplify-form-field{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\r\nvar AmplifyFormField = /** @class */ (function () {\r\n    function AmplifyFormField(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /** The input type.  Can be any HTML input type. */\r\n        this.type = 'text';\r\n        /** The required flag in order to make an input required prior to submitting a form */\r\n        this.required = false;\r\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\r\n        this.placeholder = '';\r\n    }\r\n    AmplifyFormField.prototype.render = function () {\r\n        return (h(\"div\", { class: \"form-field\" }, this.label && (h(\"div\", { class: \"form-field-label\" }, h(\"amplify-label\", { htmlFor: this.fieldId }, this.label))), this.description && (h(\"div\", { id: this.fieldId + \"-description\", class: \"form-field-description\", \"data-test\": \"form-field-description\" }, this.description)), h(\"div\", null, h(\"slot\", { name: \"input\" }, h(\"amplify-input\", { fieldId: this.fieldId, description: this.description, type: this.type, handleInputChange: this.handleInputChange, placeholder: this.placeholder, name: this.name, value: this.value, inputProps: this.inputProps, disabled: this.disabled }))), this.hint && (h(\"amplify-hint\", { id: this.fieldId + \"-hint\" }, this.hint))));\r\n    };\r\n    return AmplifyFormField;\r\n}());\r\nAmplifyFormField.style = amplifyFormFieldCss;\r\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\r\nvar AmplifyHint = /** @class */ (function () {\r\n    function AmplifyHint(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    AmplifyHint.prototype.render = function () {\r\n        return (h(\"div\", { class: \"hint\" }, h(\"slot\", null)));\r\n    };\r\n    return AmplifyHint;\r\n}());\r\nAmplifyHint.style = amplifyHintCss;\r\nvar amplifyInputCss = \"amplify-input{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}[data-autocompleted]{background-color:#e8f0fe !important}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1;-webkit-box-shadow:none;box-shadow:none}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\r\nvar AmplifyInput = /** @class */ (function () {\r\n    function AmplifyInput(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /** The input type.  Can be any HTML input type. */\r\n        this.type = 'text';\r\n        /** The callback, called when the input is modified by the user. */\r\n        this.handleInputChange = function () { return void 0; };\r\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\r\n        this.placeholder = '';\r\n        /** Whether the input has been autocompleted */\r\n        this.autoCompleted = false;\r\n    }\r\n    /**\r\n     * Sets the value of this input to the value in autofill input event.\r\n     */\r\n    AmplifyInput.prototype.setAutoCompleteValue = function (value) {\r\n        var input = this.el.querySelector('input');\r\n        if (!input)\r\n            return;\r\n        input.value = value;\r\n        // dispatch an input event from this element to the parent form\r\n        input.dispatchEvent(new Event('input'));\r\n        this.autoCompleted = true;\r\n    };\r\n    /**\r\n     * Checks if the target dummy input in `amplify-auth-container` is present have been autofilled.\r\n     * If so, we update this.value with the autofilled value.\r\n     */\r\n    AmplifyInput.prototype.checkAutoCompletion = function (targetInput) {\r\n        var _this = this;\r\n        if (!targetInput)\r\n            return;\r\n        if (targetInput.value) {\r\n            // if value is already set, we set the value directly\r\n            this.setAutoCompleteValue(targetInput.value);\r\n        }\r\n        else {\r\n            // if value is not set, we start listening for it\r\n            targetInput.addEventListener('input', function (e) {\r\n                var value = e.target.value;\r\n                _this.setAutoCompleteValue(value);\r\n            });\r\n        }\r\n    };\r\n    AmplifyInput.prototype.disconnectedCallback = function () {\r\n        this.removeHubListener && this.removeHubListener(); // stop listening to `onAuthUIStateChange`\r\n    };\r\n    AmplifyInput.prototype.componentWillLoad = function () {\r\n        var _this = this;\r\n        // the below behaviors are only applicable if `amplify-input` is used by `amplify-authenticator`.\r\n        if (!closestElement('amplify-authenticator', this.el))\r\n            return;\r\n        this.removeHubListener = onAuthUIStateChange(function () {\r\n            /**\r\n             * When we're using slots, autofilled data will persist between different authState,\r\n             * even though input events are not triggered. This ends up in parent components\r\n             * not picking up input values. For now, we're emptying the input on authState change\r\n             * which is the existing behavior.\r\n             */\r\n            var input = _this.el.querySelector('input');\r\n            if (input)\r\n                input.value = '';\r\n            _this.autoCompleted = false;\r\n        });\r\n    };\r\n    AmplifyInput.prototype.componentDidLoad = function () {\r\n        // no-op if this field already has been autofilled or already has an value\r\n        if (this.autoCompleted || this.value)\r\n            return;\r\n        if (/Firefox/.test(navigator.userAgent))\r\n            return; // firefox autofill works\r\n        var container = closestElement('amplify-auth-container', this.el);\r\n        var signIn = closestElement('amplify-sign-in', this.el);\r\n        // only autocomplete if `amplify-auth-container` is present and input is under `sign-in`.\r\n        if (!container || !signIn)\r\n            return;\r\n        var username = container.querySelector(\"input[name='username']\");\r\n        var password = container.querySelector(\"input[name='password']\");\r\n        if (this.name === 'username' ||\r\n            this.name === 'email' ||\r\n            this.name === 'phone') {\r\n            this.checkAutoCompletion(username);\r\n        }\r\n        else if (this.name === 'password') {\r\n            this.checkAutoCompletion(password);\r\n        }\r\n    };\r\n    AmplifyInput.prototype.render = function () {\r\n        var _this = this;\r\n        return (h(Host, { class: \"input-host\" }, h(\"input\", Object.assign({ id: this.fieldId, \"aria-describedby\": this.fieldId && this.description\r\n                ? this.fieldId + \"-description\"\r\n                : null, \"data-autocompleted\": this.autoCompleted, type: this.type, onInput: function (event) {\r\n                _this.autoCompleted = false;\r\n                _this.handleInputChange(event);\r\n            }, placeholder: this.placeholder, name: this.name, class: \"input\", value: this.value, disabled: this.disabled }, this.inputProps))));\r\n    };\r\n    Object.defineProperty(AmplifyInput.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return AmplifyInput;\r\n}());\r\nAmplifyInput.style = amplifyInputCss;\r\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\r\nvar AmplifyLabel = /** @class */ (function () {\r\n    function AmplifyLabel(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    AmplifyLabel.prototype.render = function () {\r\n        return (h(\"label\", { class: \"label\", htmlFor: this.htmlFor }, h(\"slot\", null)));\r\n    };\r\n    return AmplifyLabel;\r\n}());\r\nAmplifyLabel.style = amplifyLabelCss;\r\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };\r\n"],"sourceRoot":""}